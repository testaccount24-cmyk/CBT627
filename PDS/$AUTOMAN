AutoMan

AutoMan is an automated operations tool for MVS based systems
(MVS, OS/390, z/OS). It is used to control console operations by
responding to messages and issuing commands and submitting jobs.

Installation

1) Transfer the load library (automan.load) to the host using a
   file transfer program. The library must be transferred as a
   binary file with a record size of 80 bytes and a block size of
   3120. If the file transfer program is allowed to alter this, the
   program will not install.  (You already have this as member
   AUTOMAN in this pds.)
2) RECEIVE the file using the TSO RECEIVE command. The RECEIVE
   command will give you the option of changing the library name.
   You can change the name by entering DA(NEW.LIBRARY.NAME). If you
   do not change the name the library will be installed as
   DEV.AUTOMAN.LOAD.
3) APF authorize the new library. This is systems software and
   must run authorized.
4) Create a startup procedure called AUTOMAN in the system
   procedure library.
5) Create a parameter definition file.
6) Start AutoMan by entering S AUTOMAN at the console.
7) Terminate AutoMan by entering P AUTOMAN at the console.

Create Start Up Procedure

//AUTOMAN  PROC
//*
//* AUTOMAN START UP
//*
//AUTOMAN  EXEC PGM=AUTOMAN
//STEPLIB   DD DSN=hlq.AUTOMAN.LOAD,DISP=SHR
//SYSPRINT  DD SYSOUT=A
//AUTOIN    DD DSN=hlq.AUTOMAN.PARMS(AUTOMAN),DISP=SHR

The file AUTOIN contains the operations definitions that AutoMan
will use to operate the system. If there are errors in the
operations definitions they will be displayed on the SYSPRINT
dataset.


Parameter definitions.

The MSG parameter defines a console message that AutoMan will
look for and respond to. A response can be a reply, a console
command or a job submission order. The message definition can be
simple or it can contain qualification logic. The MSG parameter
can also define variable substitution. A message identifier is up
to eight characters in length.

Syntax:

MSG=msgid {qualification logic} {variable substitution}
CMD/SUB/REPLY(action)

Qualification logic enables you to check the contents of the
message for specific values before performing the action.

Qualification logic specifies positions and values that must be
true to enable the action to take place. Note that if brackets
are used to define logic, they must be balanced.

{ ( } POS={num/ANY} TEXT=ÆtextÆ AND/OR  POS={num/ANY} TEXT=ÆtextÆ { ) }
{ ( } POS={num/ANY} TEXT=ÆtextÆ AND/OR  POS={num/ANY} TEXT=ÆtextÆ { ) }

The POS sub parameter may be a number or ANY. If it is ANY the
entire message is scanned for the text value. The POS sub
parameter is a position, not an offset, so the first character of
the message is POS=1, not zero. The position is counted from the
start of the message identifier.

Variable substitution enables you to pick up values from the
message and use them in the action statement.

VAR=name POS=num LEN=num  CMD(C name)

The three actions that can be specified for a message are:

CMD(console command)
REPLY(reply text)
SUB(dataset containing the job)

Notes:
The keywords must be in the order shown. If not a syntax error
will be reported.  Multiple definitions may be made for a
message. They will all be checked and actioned as appropriate.


Examples:

MSG=AMSV993R REPLY(Y)

When AutoMan is halted by the P AUTOMAN command, it issues a
request for confirmation with a message identifier of AMSV993R.
This example statement will automatically reply Y to that
message.

MSG=IXX099I  CMD(C P390JBB4)

When message IXX099I is displayed on the console issue a cancel
command for job P390JBB4

MSG=IEF251I SUB(P390.SYS.CNTL(AJOB))
When message IEF251I is displayed submit the job in member AJOB
of PDS P390.SYS.CNTL

MSG=IEF251I SUB(P390.SYS.AJOB)

When message IEF251I is displayed submit the job in dataset
P390.SYS.AJOB


MSG=IEF233A  VAR=&V1 POS=24 LEN=8  CMD(C &V1)

When the message is displayed extract 8 bytes of information at
position 24 in the message and place them in the variable
position of the command before issuing it.

MSG=IEX003A  VAR=&V1 POS=24 LEN=8
           VAR=&V2 POS=36 LEN=8  SUB(DSN.&V1.JOBS(&V2))

When the message is displayed, extract two fields and use them to
build a dataset name for a job to submit.

MSG=IEF404I (POS=09 TEXT='P390JOB4'  AND POS=20  TEXT='ENDED') OR
            (POS=09 TEXT='P390JAB4'  AND POS=20  TEXT='ENDED')
            VAR=&V2  POS=09 LEN=8
            SUB(P390.SYS.CNTL(&V2))

When this end of job message is received, check if it for either
job P390JOB4 or P390JAB4 and it has the text ôENDEDö in position
20. If this is true, the jobname will be extracted into variable
&V2 and it will be used to define the member name containing a
job to be started.


This example could also be expressed as:

MSG=IEF404I (POS=09 TEXT='P390JOB4'  OR POS=09 TEXT='P390JAB4')
                 AND POS=20  TEXT='ENDED
                 VAR=&V2  POS=09 LEN=8
                 SUB(P390.SYS.CNTL(&V2))

MSG=IEF404I POS=09 TEXT='P390JOB4'  OR POS=09 TEXT='P390JAB4'
                 VAR=&V2  POS=09 LEN=8
                 SUB(P390.SYS.CNTL(&V2))





Copyright and License information

AutoMan is the property of Exspans System and Software
Development Inc. It is provided free of charge to the MVS
community. You may make as many copies as you wish and use it on
as many systems as required. You may not make any charge for the
use of this product. You may not disassemble or reverse engineer
it, nor may you include it in any other product, for which a
charge is made, without first obtaining a commercial use license.

For more information, or to make suggestions for upgrades and
enhancements contact Simon Spanchak at info@exspans.com.


